/**
   @function toJS
   @param {Any} [x]
   @return {Any}
   @summary Converts a [::Dict], [::Set], [::List],
            [::Queue], [::Stack], [::Tuple], or [::Record]
            to its JavaScript equivalent
   @desc
     This function has the following behavior:

     * JavaScript object literals are deeply copied, with
       [::toJS] called on all the keys/values.

       This copying takes `O(n)` time.

     * JavaScript arrays are deeply copied, with [::toJS]
       called on all the values.

       This copying takes `O(n)` time.

     * [::Dict] and [::Record] are converted into
       a JavaScript object, with [::toJS] called on all
       the keys/values. The keys must be strings or [::Tag].

       This conversion takes `O(n)` time.

     * [::Set], [::List], [::Queue], [::Stack], and
       [::Tuple] are converted into a JavaScript array,
       with [::toJS] called on all the values.

       This conversion takes `O(n)` time.

     * Everything else is returned as-is.

     ----

     This is useful if you like using [::Dict], [::Set],
     [::List], [::Queue], [::Stack], [::Tuple], or [::Record]
     but you want to use a library that requires ordinary
     JavaScript objects/arrays.

     If you want to losslessly store an immutable object on
     disk, or send it over the network, you can use [::toJSON]
     and [::fromJSON] instead.
 */
