/**
   @class Queue
   @summary An immutable ordered sequence of values that can
            efficiently add to the end and remove from the front

   @function Queue
   @param {optional ::Iterable} [seq]
   @desc
     The values from `seq` will be inserted into
     the queue, in the same order as `seq`.

     This takes `O(n)` time, unless `seq` is already a
     [::Queue], in which case it takes `O(1)` time.

     ----

     Duplicate values are allowed, and duplicates don't
     have to be in the same order.

     The values in the queue can have whatever order you
     want, but they are not sorted. If you want the values
     to be sorted, use a [::SortedSet] instead.

   @function Queue.isEmpty
   @return {Boolean} `true` if the queue is empty
   @summary Returns whether the queue is empty or not
   @desc
     This function runs in `O(1)` time.

     A queue is empty if it has no values in it.

   @function Queue.removeAll
   @return {::Queue} A new queue with no values
   @summary Returns a new queue with no values
   @desc
     This function runs in `O(1)` time.

     This does not modify the queue, it returns a new queue.

   @function Queue.size
   @return {Integer} The number of values in the queue
   @summary Returns the number of values in the queue
   @desc
     This function runs in `O(1)` time.

   @function Queue.peek
   @param {optional Any} [default] Value to return if the queue is empty
   @return {Any} The value at the front of the queue, or `default` if the queue is empty
   @summary Returns the value at the front of the queue, or `default` if the queue is empty
   @desc
     This function runs in `O(1)` time.

     If the queue is empty:

     * If `default` is provided, it is returned.
     * If `default` is not provided, an error is thrown.

   @function Queue.push
   @param {Any} [value] The value to insert at the end of the queue
   @return {::Queue} A new queue with `value` inserted at the end of the queue
   @summary Returns a new queue with `value` inserted at the end of the queue
   @desc
     This function runs in `O(1)` time.

     This does not modify the queue, it returns a new queue.

   @function Queue.pop
   @return {::Queue} A new queue with the value at the front removed
   @summary Returns a new queue with the value at the front removed
   @desc
     This function runs in amortized `O(1)` time.

     This does not modify the queue, it returns a new queue.

     If the queue is empty, an error is thrown.

   @function Queue.concat
   @param {::Iterable} [other] The [::Iterable] to append to this queue
   @return {::Queue} A new queue with all the values of this queue followed
                     by all the values of `other`.
   @summary Returns a new queue with all the values of this queue followed
            by all the values of `other`.
   @desc
     This function runs in `O(n)` time.

     This does not modify the queue, it returns a new queue.
*/
