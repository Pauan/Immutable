/**
   @class Stack
   @summary An immutable ordered sequence of values that can
            efficiently add and remove from the end

   @function Stack
   @param {optional sequence::Sequence} [seq]
   @desc
     The values from `seq` will be inserted into
     the stack, in the same order as `seq`.

     This takes `O(n)` time, unless `seq` is already a
     [::Stack], in which case it takes `O(1)` time.

     ----

     Duplicate values are allowed, and duplicates don't
     have to be in the same order.

     The values in the stack can have whatever order you
     want, but they are not sorted. If you want the values
     to be sorted, use a [::SortedSet] instead.

   @function Stack.isEmpty
   @return {Boolean} `true` if the stack is empty
   @summary Returns whether the stack is empty or not
   @desc
     This function runs in `O(1)` time.

     A stack is empty if it has no values in it.

   @function Stack.size
   @return {Integer} The number of values in the stack
   @summary Returns the number of values in the stack
   @desc
     This function runs in `O(1)` time.

   @function Stack.peek
   @param {optional Any} [default] Value to return if the stack is empty
   @return {Any} The value at the end of the stack, or `default` if the stack is empty
   @summary Returns the value at the end of the stack, or `default` if the stack is empty
   @desc
     This function runs in `O(1)` time.

     If the stack is empty:

     * If `default` is provided, it is returned.
     * If `default` is not provided, an error is thrown.

   @function Stack.push
   @param {Any} [value] The value to insert at the end of the stack
   @return {::Stack} A new stack with `value` inserted at the end of the stack
   @summary Returns a new stack with `value` inserted at the end of the stack
   @desc
     This function runs in `O(1)` time.

     This does not modify the stack, it returns a new stack.

   @function Stack.pop
   @return {::Stack} A new stack with the value at the end removed
   @summary Returns a new stack with the value at the end removed
   @desc
     This function runs in `O(1)` time.

     This does not modify the stack, it returns a new stack.

     If the stack is empty, an error is thrown.

   @function Stack.concat
   @param {sequence::Sequence} [other] The [sequence::Sequence] to append to this stack
   @return {::Stack} A new stack with all the values of this stack followed
                     by all the values of `other`.
   @summary Returns a new stack with all the values of this stack followed
            by all the values of `other`.
   @desc
     This function runs in `O(n)` time.

     This does not modify the stack, it returns a new stack.
*/
