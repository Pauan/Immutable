/**
   @function UUIDTag
   @param {String} [uuid] Lower-case UUID to use for the tag
   @return {::Tag} A tag which uses `uuid` for equality
   @summary Returns a [::Tag] which uses `uuid` for equality
   @desc
     Using [::Tag] is very easy and convenient, but it
     has a major limitation: you can't convert a [::Tag]
     to/from JSON.

     The reason for this is: imagine a server and client that
     both use the same library. The library uses some tags.
     The server sends some data to the client (using `toJSON`),
     which the client then receives (using `fromJSON`).

     Because both the client and server are using the same
     library, you would expect the tags to be the same, but
     they're not!

     Another example: imagine some data that uses tags. The
     data is saved to a database using `toJSON`. The program
     is restarted, and the data is grabbed from the database
     (using `fromJSON`). You would expect the tags to match
     up, but they don't.

     There's not that many good ways to solve this problem.
     UUIDs are one solution, so that's what [::UUIDTag] uses.

     Rather than doing this:

         var tag_foo = Tag();

     You should instead do this:

         var tag_foo = UUIDTag("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx");

     Replace "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx" with a UUID
     that you have generated.

     If two tags use the same UUID, they are treated as the same
     tag, and so now the server can correctly send the data to
     the client, and the tags will match with the database.

     But you have to be careful that different tags have different
     UUIDs, or you will have a collision. You can't reuse the same
     UUID over and over again, you have to generate a new one every
     time.

     You can search Google for "uuid generator". I personally
     use [this site](https://www.uuidgenerator.net/version4).
 */
