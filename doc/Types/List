/**
   @class List
   @summary An immutable ordered sequence of values

   @function List
   @param {optional ::Iterable} [seq]
   @desc
     The values from `seq` will be inserted into
     the list, in the same order as `seq`.

     This takes `O(n)` time, unless `seq` is already a
     [::List], in which case it takes `O(1)` time.

     ----

     Duplicate values are allowed, and duplicates don't
     have to be in the same order.

     The values in the list can have whatever order you
     want, but they are not sorted. If you want the values
     to be sorted, use a [::SortedSet] instead.

   @function List.isEmpty
   @return {Boolean} `true` if the list is empty
   @summary Returns whether the list is empty or not
   @desc
     This function runs in `O(1)` time.

     A list is empty if it has no values in it.

   @function List.size
   @return {Integer} The number of values in the list
   @summary Returns the number of values in the list
   @desc
     This function runs in `O(1)` time.

   @function List.has
   @param {Integer} [index] An index within the list
   @return {Boolean} `true` if `index` is valid
   @summary Returns whether `index` is valid for the list
   @desc
     This function runs in `O(1)` time.

     `index` is valid if it is between `0` and
     `list.size() - 1`.

     If `index` is negative, it starts counting from
     the end of the list, so `-1` is the last index for
     the list, `-2` is the second-from-last index, etc.

   @function List.get
   @param {Integer} [index] Index within the list
   @param {optional Any} [default] Value to return if `index` is not in the list
   @return {Any} The value in the list at `index`, or `default` if `index` is not in the list
   @summary Returns the value in the list at `index`, or `default` if `index` is not in the list
   @desc
     This function runs in `O(log2(n / 125))` worst-case time.

     If `index` is negative, it starts counting from
     the end of the list, so `-1` is the last value
     in the list, `-2` is the second-from-last value,
     etc.

     If `index` is not in the list:

     * If `default` is provided, it is returned.
     * If `default` is not provided, an error is thrown.

   @function List.insert
   @param {Any} [value] The value to insert into the list
   @param {optional Integer} [index] The index to insert `value`. Defaults to `-1`.
   @return {::List} A new list with `value` inserted at `index`
   @summary Returns a new list with `value` inserted at `index`
   @desc
     If inserting at the end of the list, this function runs in
     amortized `O(1)` time.

     Otherwise this function runs in `O(log2(n / 125) + 125)`
     worst-case time.

     This does not modify the list, it returns a new list.

     ----

     `index` defaults to `-1`, which inserts `value` at
     the end of the list.

     If `index` is negative, it starts counting from
     the end of the list, so `-1` inserts `value` as
     the last value, `-2` inserts `value` as the
     second-from-last value, etc.

     If `index` is invalid, an error is thrown.

   @function List.remove
   @param {optional Integer} [index] The index to remove from the list. Defaults to `-1`.
   @return {::List} A new list with the value at `index` removed
   @summary Returns a new list with the value at `index` removed
   @desc
     This function runs in `O(log2(n / 125) + 125)` worst-case time.

     This does not modify the list, it returns a new list.

     ----

     `index` defaults to `-1`, which removes the value
     at the end of the list.

     If `index` is negative, it starts counting from
     the end of the list, so `-1` removes the last value,
     `-2` removes the second-from-last value, etc.

     If `index` is not in the list, an error is thrown.

   @function List.removeAll
   @return {::List} A new list with no values
   @summary Returns a new list with no values
   @desc
     This function runs in `O(1)` time.

     This does not modify the list, it returns a new list.

   @function List.set
   @param {Integer} [index] The index to set in the list
   @param {Any} [value] The value to set at `index`
   @return {::List} A new list with the value at `index` set to `value`
   @summary Returns a new list with the value at `index` set to `value`
   @desc
     This function runs in `O(log2(n / 125) + 125)` worst-case time.

     This does not modify the list, it returns a new list.

     ----

         var list = List([1, 2, 3]);

         // This returns the list [50, 2, 3]
         list.set(0, 50);

         // This returns the list [1, 50, 3]
         list.set(1, 50);

     If `index` is negative, it starts counting from
     the end of the list, so `-1` sets the last value,
     `-2` sets the second-from-last value, etc.

     If `index` is not in the list, an error is thrown.

   @function List.modify
   @param {Integer} [index] The index to modify in the list
   @param {Function} [fn] The function which will modify the value at `index`
   @return {::List} A new list with the value at `index` modified by `fn`
   @summary Returns a new list with the value at `index` modified by `fn`
   @desc
     This function runs in `O(log2(n / 125) + 125)` worst-case time.

     This does not modify the list, it returns a new list.

     ----

     This function calls `fn` with the value at `index`, and
     whatever `fn` returns will be used as the new value at
     `index`:

         var list = List([1, 2, 3]);

         // This returns the list [11, 2, 3]
         list.modify(0, function (x) { return x + 10 });

         // This returns the list [1, 12, 3]
         list.modify(1, function (x) { return x + 10 });

     If `index` is negative, it starts counting from
     the end of the list, so `-1` modifies the last value,
     `-2` modifies the second-from-last value, etc.

     If `index` is not in the list, an error is thrown.

   @function List.slice
   @param {optional Integer} [from] The index to start at. Defaults to `0`
   @param {optional Integer} [to] The index to end at. Defaults to `list.size()`
   @return {::List} A new list with all the values between indexes
                    `from` (included) and `to` (excluded).
   @summary Returns a new list with all the values between indexes
            `from` (included) and `to` (excluded).
   @desc
     This function runs in `O(log2(n / 125) + 249 + (2 * (m / 125)))`
     worst-case time.

     This does not modify the list, it returns a new list.

     ----

     `from` defaults to `0`. `to` defaults to `list.size()`.
     This means that `list.slice()` returns all the values
     in `list`.

     If `from` or `to` is negative, it starts counting from
     the end of the list, so `-1` means the last value of
     the list, `-2` means the second-from-last value, etc.

     ----

     If `from` is not in the list, an error is thrown.

     If `to` is invalid, an error is thrown.

     If `from` is greater than `to`, an error is thrown.

     ----

     Some examples:

         var list = List([1, 2, 3, 4]);

         list.slice()       // [1, 2, 3, 4]
         list.slice(1)      // [2, 3, 4]
         list.slice(1, 3)   // [2, 3]
         list.slice(-1)     // [4]
         list.slice(-2, -1) // [3]

   @function List.concat
   @param {::Iterable} [other] The [::Iterable] to append to this list
   @return {::List} A new list with all the values of this list followed
                    by all the values of `other`.
   @summary Returns a new list with all the values of this list followed
            by all the values of `other`.
   @desc
     If `other` is a [::List], this function runs in
     `O(125 + log2(n / 125) + log2(min(n / 125, m / 125)))`
     worst-case time.

     Otherwise this function runs in `O(n)` time.

     This does not modify the list, it returns a new list.
*/
