/**
   @class Iterator
   @summary A simple protocol for iterating things
   @desc
     All [::Iterable] things can be converted into an [::Iterator]
     by using [::toIterator].

     An [::Iterator] is simply an object that has a `next`
     method.

     Calling the `next` method will return an object with
     the following properties:

     * If the [::Iterator] is finished, `done` will be `true`.

     * If the [::Iterator] is not finished, `value` will be the value
       of the next element in the [::Iterator].

         var iterator = toIterator([1, 2, 3]);

         // this returns { value: 1 }
         iterator.next();

         // this returns { value: 2 }
         iterator.next();

         // this returns { value: 3 }
         iterator.next();

         // this returns { done: true }
         iterator.next();

     As you can see above, iterators are *mutable*: every time
     you call the `next` method it will return the next value,
     or `done` if it's finished.

     It is recommended to not use [::Iterator] directly, instead
     you should use the higher-level functions like `each`, `map`,
     `foldl`, etc.

     But if you want to create your own iteration functions, you
     will need to use [::toIterator] and [::Iterable].
 */
