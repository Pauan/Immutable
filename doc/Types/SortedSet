/**
   @function SortedSet
   @param {Function} [sort] Function that determines the sort order
   @param {optional ::Iterable} [seq]
   @return {::Set} A set where the values are sorted by `sort`
   @summary Returns a [::Set] where the values are sorted by `sort`
   @desc
     The sort order for the values is determined by the `sort` function.

     The `sort` function is given two values:

     * If it returns `0` the values are treated as equal.
     * If it returns `-1` the first value is lower than the second value.
     * If it returns `1` the first value is greater than the second value.

     The sort order must be consistent:

     * If given the same values, the function must return the same result.
     * If it returns `0` for `foo` and `bar`, it must return `0` for `bar` and `foo`.
     * If it returns `-1` for `foo` and `bar`, it must return `1` for `bar` and `foo`.
     * If it returns `1` for `foo` and `bar`, it must return `-1` for `bar` and `foo`.

     If the sort order is not consistent, the behavior of
     [::SortedSet] will be unpredictable. This is not a
     bug in [::SortedSet], it is a bug in your sort
     function.

     ----

     The `seq` parameter is exactly the same as for [::Set],
     except that the values are sorted.
 */
